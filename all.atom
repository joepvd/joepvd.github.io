<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>escape code</title><link href="http://joepvd.github.io/" rel="alternate"></link><link href="http://joepvd.github.io/all.atom" rel="self"></link><id>http://joepvd.github.io/</id><updated>2015-05-10T00:00:00+02:00</updated><entry><title>grep2awk: A small zsh/zle helper</title><link href="http://joepvd.github.io/grep2awk-a-small-zshzle-helper.html" rel="alternate"></link><updated>2015-05-10T00:00:00+02:00</updated><author><name>joepd</name></author><id>tag:joepvd.github.io,2015-05-10:grep2awk-a-small-zshzle-helper.html</id><summary type="html">&lt;p&gt;While trying to find the needle in a haystack, you find yourself recklessly grepping some log files.  Suddenly, it occurs to you that there might be a pattern in the data, and &lt;tt class="docutils literal"&gt;awk&lt;/tt&gt; will be the fastest way to figure out if this pattern has any relevance or not.  You want to change your &lt;tt class="docutils literal"&gt;grep&lt;/tt&gt; into an &lt;tt class="docutils literal"&gt;awk&lt;/tt&gt; oneliner.&lt;/p&gt;
&lt;p&gt;This involves some mechanical work: Arrow up to get to the command line, move to the word &lt;tt class="docutils literal"&gt;grep&lt;/tt&gt; and change it, forward to the start of the regular expression and add &lt;tt class="docutils literal"&gt;'/&lt;/tt&gt;. Move to the end of the regular expression, and type: &lt;tt class="docutils literal"&gt;/ {}'&lt;/tt&gt;.  Not a big deal, but mechanical work, which does add up if you're doing this eight times a day.&lt;/p&gt;
&lt;p&gt;For this slight inconvenience, the tool &lt;tt class="docutils literal"&gt;grep2awk&lt;/tt&gt; was written. It finds the first occurrence of the word &lt;tt class="docutils literal"&gt;grep&lt;/tt&gt; in the current command line, and tries to convert the options and the regular expression into a skeleton for an &lt;tt class="docutils literal"&gt;awk&lt;/tt&gt;-script.  Just press a key you have chosen yourself, and you're already past the point of potential distraction which the mechanical work can entail.&lt;/p&gt;
&lt;div class="section" id="how-to-use"&gt;
&lt;h2&gt;How to use:&lt;/h2&gt;
&lt;p&gt;Clone the repository someplace:&lt;/p&gt;
&lt;pre class="code sh literal-block"&gt;
git clone &lt;span class="s1"&gt;'https://github.com/joepvd/grep2awk.git'&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Then put the file &lt;tt class="docutils literal"&gt;grep2awk&lt;/tt&gt; somewhere in your &lt;tt class="docutils literal"&gt;$fpath&lt;/tt&gt;.  Make sure the file gets &lt;tt class="docutils literal"&gt;autoload&lt;/tt&gt;-ed, making the script known as a line editor (&lt;tt class="docutils literal"&gt;zle&lt;/tt&gt;) script, and assigning a key binding to it:&lt;/p&gt;
&lt;pre class="code sh literal-block"&gt;
autoload -Uz grep2awk
zle -N grep2awk
bindkey &lt;span class="s2"&gt;&amp;quot;^X^A&amp;quot;&lt;/span&gt; grep2awk
&lt;/pre&gt;
&lt;p&gt;Now, pressing &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;CTRL-X&amp;gt;&lt;/span&gt;&lt;/tt&gt;-&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;CTRL-A&amp;gt;&lt;/span&gt;&lt;/tt&gt; will bring you goodies!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-following-grep-options-are-supported"&gt;
&lt;h2&gt;The following grep options are supported:&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-v&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;inverse match&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-w&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;word match&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-x&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;line match&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-l&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;list matching files&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-L&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;list not matching files&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-H&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;include filename in result&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-n&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;include line number in result&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-c&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;count occurrences per file&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-i&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;case insensitive matching&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-E&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Extended Regular Expressions&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-F&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Fixed string matching&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="development"&gt;
&lt;h2&gt;Development&lt;/h2&gt;
&lt;p&gt;If you &lt;tt class="docutils literal"&gt;source&lt;/tt&gt; the file &lt;tt class="docutils literal"&gt;init.zsh&lt;/tt&gt;, the development version of &lt;tt class="docutils literal"&gt;grep2awk&lt;/tt&gt; will be made available under key binding &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;CTRL-P&amp;gt;&lt;/span&gt;&lt;/tt&gt;. Handy for quick testing.&lt;/p&gt;
&lt;p&gt;There is a testing library in the &lt;tt class="docutils literal"&gt;t&lt;/tt&gt;-directory, in which the testing framework from the &lt;cite&gt;ZSH&lt;/cite&gt;-project has been adjusted to work with the currently installed shell.  Please run and update the tests when playing with the code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bugs"&gt;
&lt;h2&gt;Bugs&lt;/h2&gt;
&lt;p&gt;There are some bugs.  The conversion from Basic Regular Expressions (which bare &lt;tt class="docutils literal"&gt;grep&lt;/tt&gt; uses) to Extended Regular Expressions (which &lt;tt class="docutils literal"&gt;egrep&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;awk&lt;/tt&gt; use) has not been implemented. The treatment of backslashes in the conversion from Fixed String to Extended Regular Expression is not working.  Furthermore, the context options (&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-A&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-B&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-C&lt;/span&gt;&lt;/tt&gt;) are not implemented, as well as &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-o&lt;/span&gt;&lt;/tt&gt; (only-matching). Some fuky stuff with snooping aliases and the (deprecated) environment variable &lt;tt class="docutils literal"&gt;GREP_OPTIONS&lt;/tt&gt; is as of yet not implemented. Also, colorized output is not supported.&lt;/p&gt;
&lt;p&gt;Please let me know whether you like it, and what could be better to support your needs!&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>zsh: learn while doing</title><link href="http://joepvd.github.io/zsh-learn-while-doing.html" rel="alternate"></link><updated>2014-04-17T00:00:00+02:00</updated><author><name>joepd</name></author><id>tag:joepvd.github.io,2014-04-17:zsh-learn-while-doing.html</id><summary type="html">&lt;p&gt;What good are advanced and hard to remember features if there is no help available at a fingertip?  Globbing in zsh might be the best thing since sliced bread, but if you don't know the details, you might as well be chewing on a brick.&lt;/p&gt;
&lt;p&gt;So, why not organize in such a way so that the details are readily available?  One of the many nice ideas from feh's &lt;a class="reference external" href="http://git.plenz.com/configs/plain/.zsh/zshrc"&gt;excellent zsh configuration file&lt;/a&gt; does exactly that, but it looked ugly on a too small terminal, and it looks like quite some manual work to format the information in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.zshrc&lt;/span&gt;&lt;/tt&gt;.  So I made &lt;a class="reference external" href="https://github.com/joepvd/zsh-hints"&gt;zsh-hints&lt;/a&gt;, a small helper program that turns a definition file into helpful hints.&lt;/p&gt;
&lt;p&gt;Who can remember all those &lt;a class="reference external" href="http://zsh.sourceforge.net/Doc/Release/Expansion.html#Glob-Operators"&gt;glob flags&lt;/a&gt;?  Imagine wanting to see the Setgid, and world readable files in somewhere here in a subdirectory. Just hit &lt;tt class="docutils literal"&gt;&amp;lt;CTRL &lt;span class="pre"&gt;X&amp;gt;&amp;lt;g&amp;gt;&lt;/span&gt;&lt;/tt&gt; …&lt;/p&gt;
&lt;pre class="code sh literal-block"&gt;
% print -l **/*&amp;lt;CTRL X&amp;gt;&amp;lt;g&amp;gt;
&lt;/pre&gt;
&lt;p&gt;… and you will be presented with this result:&lt;/p&gt;
&lt;pre class="code sh literal-block"&gt;
% print -l **/*
/           ▶ directories
F           ▶ non-empty directories &lt;span class="o"&gt;(&lt;/span&gt;full&lt;span class="o"&gt;)&lt;/span&gt;
.           ▶ plain files
-           ▶ executable plain files
l&lt;span class="o"&gt;[&lt;/span&gt;-+&lt;span class="o"&gt;]&lt;/span&gt;n      ▶ link count
r,w,x       ▶ owner &lt;span class="o"&gt;(&lt;/span&gt;r&lt;span class="o"&gt;)&lt;/span&gt;eadable &lt;span class="o"&gt;(&lt;/span&gt;w&lt;span class="o"&gt;)&lt;/span&gt;ritable,
              e&lt;span class="o"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;)&lt;/span&gt;ecutable files
A,I,E       ▶ group re&lt;span class="o"&gt;(&lt;/span&gt;A&lt;span class="o"&gt;)&lt;/span&gt;dable wr&lt;span class="o"&gt;(&lt;/span&gt;I&lt;span class="o"&gt;)&lt;/span&gt;table,
              &lt;span class="o"&gt;(&lt;/span&gt;E&lt;span class="o"&gt;)&lt;/span&gt;xecutable files
R,W,X       ▶ world &lt;span class="o"&gt;(&lt;/span&gt;R&lt;span class="o"&gt;)&lt;/span&gt;readable, &lt;span class="o"&gt;(&lt;/span&gt;W&lt;span class="o"&gt;)&lt;/span&gt;ritable,
              e&lt;span class="o"&gt;(&lt;/span&gt;X&lt;span class="o"&gt;)&lt;/span&gt;ecutable files
s,G,t       ▶ setuid, setgid, sticky bit files
f&lt;span class="o"&gt;[&lt;/span&gt;+&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;]&lt;/span&gt;NNN   ▶ files with access rights matching
              +,-,&lt;span class="o"&gt;=&lt;/span&gt; octal number
&lt;span class="o"&gt;{&lt;/span&gt;U,G&lt;span class="o"&gt;}&lt;/span&gt;NNN    ▶ owned by effective &lt;span class="o"&gt;(&lt;/span&gt;U&lt;span class="o"&gt;)&lt;/span&gt;ser,&lt;span class="o"&gt;(&lt;/span&gt;G&lt;span class="o"&gt;)&lt;/span&gt;roup
              ID
&lt;span class="o"&gt;{&lt;/span&gt;u,g&lt;span class="o"&gt;}&lt;/span&gt;NNN    ▶ owned by user, group id &lt;span class="sb"&gt;`&lt;/span&gt;NNN&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;u,g&lt;span class="o"&gt;}&lt;/span&gt;:name: ▶ owned by user, group name &lt;span class="sb"&gt;`&lt;/span&gt;name&lt;span class="sb"&gt;`&lt;/span&gt;
   ...18 hints omitted.
&lt;/pre&gt;
&lt;p&gt;A quick glance will help you conclude that &lt;tt class="docutils literal"&gt;(.GW)&lt;/tt&gt; is what you are looking for.&lt;/p&gt;
&lt;p&gt;This example was made on a rather small terminal.  That is why some of the explanations were wrapped, and were displayed with a secondary separator of just a space. It also did not fit in the vertical direction.  An optional message notifying how much you are missing on is displayed.&lt;/p&gt;
&lt;p&gt;The key file is really simple to make: It just assumes that the first space separates the key from the explanation. There is no way of putting a space in the key.&lt;/p&gt;
&lt;p&gt;All the details of installation and configuration are covered in the &lt;a class="reference external" href="https://github.com/joepvd/zsh-hints"&gt;README&lt;/a&gt;. Please let me know if it does or does not work for you.&lt;/p&gt;
&lt;p&gt;Enjoy :)&lt;/p&gt;
</summary></entry><entry><title>Revisiting array-to-quote</title><link href="http://joepvd.github.io/revisiting-array-to-quote.html" rel="alternate"></link><updated>2014-04-15T00:00:00+02:00</updated><author><name>joepd</name></author><id>tag:joepvd.github.io,2014-04-15:revisiting-array-to-quote.html</id><summary type="html">&lt;p&gt;Computing professionals are in some way similar to athletes and musicians: Continued practicing sessions makes them better at what they do.  Interestingly, it seems that there is not so much a culture of inconsequential coding sessions to sharpen your skills.  Dave Thomas practices what he preaches with &lt;a class="reference external" href="http://codekata.com"&gt;Code kata&lt;/a&gt;'s.&lt;/p&gt;
&lt;p&gt;The nice part about repetitive tasks, is that there is a reason to automate 'em.  And when the automated solution starts to feel like a drag, it's time to improve the solution.  Repetitive tasks lend themselves very well to katas.  You probably know the corner cases, and have some ideas of what would suit your work flow.  Continued study of the mechanics of simple manipulations really can get you forward.  As an addition to the metaphor of kata's, I'd like to propose to think about the wood worker sharpening his tools.&lt;/p&gt;
&lt;p&gt;That was more than enough meta for an introduction to pretty down-to-earth stuff.  As I regularly have to shape one output in a quoted, comma separated list, I came to revisit the solution posted in my &lt;a class="reference external" href="http://joepvd.github.io/parameter-expansion-in-zsh.html"&gt;first post&lt;/a&gt;.  This time, I set myself to make a keyboard shortcut that operates on the closest word to the cursor in a terminal running zsh.&lt;/p&gt;
&lt;p&gt;Just drop this part in your &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.zshrc&lt;/span&gt;&lt;/tt&gt;, and you should have that short moment of gratification when it seems that the computer is obeying your will at the gentlest of gestures:&lt;/p&gt;
&lt;pre class="code sh literal-block"&gt;
array-to-quote&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    autoload -U modify-current-argument
    modify-current-argument &lt;span class="s1"&gt;'$(
        if [[ ${(Pt)ARG} = &amp;quot;array&amp;quot; ]]; then
            print ${(j., .)${(qq)${(P)ARG}}}
        elif [[ -r $ARG ]]; then
            print ${(j., .)${(qq)${(f)&amp;quot;$(&amp;lt;$ARG)&amp;quot;}}}
        else
            print ${(qq)ARG}
        fi
    )'&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
zle -N array-to-quote
&lt;span class="c"&gt;# Terminal: Stop stealing CTRL-q and CTRL-s!
&lt;/span&gt;stty start &lt;span class="s1"&gt;'^-'&lt;/span&gt; stop &lt;span class="s1"&gt;'^-'&lt;/span&gt;
bindkey &lt;span class="s2"&gt;&amp;quot;^q&amp;quot;&lt;/span&gt; array-to-quote
&lt;/pre&gt;
&lt;p&gt;If you copy-paste this into your zsh, and press &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;CTRL-q&lt;/span&gt;&lt;/tt&gt;, the word under your cursor will become quoted. If that word happens to be a file, the lines of that file will appear as a quoted list.  If the word i an array, the elements are added nicely quoted and comma separated.  Nice huh?&lt;/p&gt;
&lt;p&gt;So, what is actually happening in these few lines?&lt;/p&gt;
&lt;p&gt;First, a function is defined, that uses a function usually distributed with &lt;tt class="docutils literal"&gt;zsh&lt;/tt&gt;: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;modify-current-argument&lt;/span&gt;&lt;/tt&gt;.  This function takes a function as an argument, and as a bonus, this function can use the variable &lt;tt class="docutils literal"&gt;$ARG&lt;/tt&gt;: the word under or left of the cursor.  Have a look at &lt;tt class="docutils literal"&gt;man zshcontrib&lt;/tt&gt; for a complete description.&lt;/p&gt;
&lt;p&gt;The function that &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;modify-current-argument&lt;/span&gt;&lt;/tt&gt; calls, make use of parameter expansion flags, and you should be able to follow along after reading my earlier post on the topic.&lt;/p&gt;
&lt;p&gt;Now we have a function that takes the word under the cursor as an argument.  This we need to have as a keyboard shortcut.  &lt;tt class="docutils literal"&gt;zle &lt;span class="pre"&gt;-N&lt;/span&gt; &lt;span class="pre"&gt;function-name&lt;/span&gt;&lt;/tt&gt; does the first part: It makes the function &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;function-name&lt;/span&gt;&lt;/tt&gt; availabe as a command line editing &lt;strong&gt;widget&lt;/strong&gt;.  This widget is in turn bound to &lt;tt class="docutils literal"&gt;CTRL q&lt;/tt&gt; with the &lt;tt class="docutils literal"&gt;bindkey&lt;/tt&gt; statement.  There happened to be something special about &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;CTRL-Q&lt;/span&gt;&lt;/tt&gt;:  I needed to tell the terminal driver to not listen to a functionality that I have never knowingly used with the &lt;tt class="docutils literal"&gt;stty&lt;/tt&gt;-command.  Please tell me if I miss out on cool stuff...&lt;/p&gt;
&lt;p&gt;But wait a sec.  There is this other thing that I regularly do:  To make a regular expression from some kind of list.  This is what does that trick, and binds it under &lt;tt class="docutils literal"&gt;CTRL \&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code sh literal-block"&gt;
array-to-pipe&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    autoload -U modify-current-argument
    modify-current-argument &lt;span class="s1"&gt;'$(
        if [[ ${(Pt)ARG} = &amp;quot;array&amp;quot; ]]; then
            print ${(j.|.)${(P)ARG}}
        elif [[ -r $ARG ]]; then
            print ${(j.|.)${(f)&amp;quot;$(&amp;lt;$ARG)&amp;quot;}}
        else
            print ${ARG}
        fi
    )'&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
zle -N array-to-pipe
bindkey &lt;span class="err"&gt;'&lt;/span&gt;^&lt;span class="se"&gt;\'&lt;/span&gt; array-to-pipe
&lt;/pre&gt;
&lt;p&gt;Keep sharpening your knives :)&lt;/p&gt;
</summary></entry><entry><title>readline and psql</title><link href="http://joepvd.github.io/readline-and-psql.html" rel="alternate"></link><updated>2013-12-31T00:00:00+01:00</updated><author><name>joepd</name></author><id>tag:joepvd.github.io,2013-12-31:readline-and-psql.html</id><summary type="html">&lt;p&gt;One of the nicer feautures of PostgresQL is its client: psql.  This nifty console application has builtin readline support.  As I am spending so much time in psql sessions, it is worth to learn how to abuse the readline library for some key board magic.&lt;/p&gt;
&lt;p&gt;Readline is what you are actually working with (or against!) in an interactive Bash session. ZSH has its own infrastructure for interaction, but there are quite some applications besides Bash which make use of this interaction infrastructure.  A basic list of readline keyboard shortcuts has been compiled at &lt;a class="reference external" href="http://www.bigsmoke.us/readline/shortcuts"&gt;this page&lt;/a&gt;, and most of these will be in the muscle memory of console warriors.  Suffice to say that this is just a part of the default configuration, see &lt;tt class="docutils literal"&gt;man 3 readline&lt;/tt&gt; for some more possibilities.&lt;/p&gt;
&lt;p&gt;If you find that you are typing often the same thing in a readline supported application, you might be interested to hear that Readline kindly offers to do the typing for you.   These are called keyboard macros, and are configured in readline's configuration file: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.inputrc&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The following is very useful, almost taken directly from &lt;tt class="docutils literal"&gt;man 3 readline&lt;/tt&gt;. If you put this in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.inputrc&lt;/span&gt;&lt;/tt&gt;, pressing &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Alt-q&lt;/span&gt;&lt;/tt&gt; will put single quotes around the word currently under the cursor:&lt;/p&gt;
&lt;pre class="code sh literal-block"&gt;
&lt;span class="s2"&gt;&amp;quot;^[q&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;^[b\'^[f\'&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This looks cryptic, so let's have a closer look.  Before &lt;tt class="docutils literal"&gt;:&lt;/tt&gt; is the key combination that triggers the action after the colon. &lt;tt class="docutils literal"&gt;^[q&lt;/tt&gt; translates into &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Alt-q&lt;/span&gt;&lt;/tt&gt;, so that will trigger the action.&lt;/p&gt;
&lt;p&gt;But how do you know that &lt;tt class="docutils literal"&gt;^[q&lt;/tt&gt; happens to represent &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Alt-q&lt;/span&gt;&lt;/tt&gt;?  The good news is that you don't, when you use the following method in &lt;tt class="docutils literal"&gt;vim&lt;/tt&gt; to generate the escape code.  In insert mode, press &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;CTRL-V&lt;/span&gt;&lt;/tt&gt;. This will tell vim to put literally what comes next.  If you press &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Alt-q&lt;/span&gt;&lt;/tt&gt; directly after &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;CTRL-v&lt;/span&gt;&lt;/tt&gt;, this sequence will show up, and that is all there is to it.  You will notice, that when moving the cursor over the &lt;tt class="docutils literal"&gt;^[&lt;/tt&gt;, the cursor will jump over the two signs as if it is one.  That is because it _is_ one character.  Copy pasting these escape sequences into your editor most likely will not work.&lt;/p&gt;
&lt;p&gt;So what about the action after the colon? This is a sequence that you can type literally in &lt;tt class="docutils literal"&gt;psql&lt;/tt&gt;.  Press &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Alt-b&lt;/span&gt;&lt;/tt&gt; (bound to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;backward-word&lt;/span&gt;&lt;/tt&gt;), then type a single quote (which in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.inputrc&lt;/span&gt;&lt;/tt&gt; needs to be escaped by a backslash).  Continue by pressing &lt;tt class="docutils literal"&gt;Alt+f&lt;/tt&gt;, which brings you to the end of the word, where another single quote is inserted.  Result:  The current word is quoted.  With this configuration in place, you just need to press one key combination, instead of needing complicated eye-hand coordination to move cursor to where it should be.&lt;/p&gt;
&lt;p&gt;As I am working with a horribly normalized datamodel where finding what one needs can take an icredible amount of time, I often query the system tables from postgres to navigate in the database.  A question that I keep repeating to ask, is: In which tables does this column name appear? A valuable indicator for the role of the table is the amount of information it contains.  The following query helps me a lot to quickly find what I am actually looking for:&lt;/p&gt;
&lt;pre class="code sql literal-block"&gt;
&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="k"&gt;distinct&lt;/span&gt;
    &lt;span class="n"&gt;relname&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;reltuples&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;rowcount&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;information_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;cols&lt;/span&gt;
&lt;span class="k"&gt;join&lt;/span&gt; &lt;span class="n"&gt;pg_class&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;pg_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;relname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;table_name&lt;/span&gt;
&lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="k"&gt;column_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'name-of-column'&lt;/span&gt;
    &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;reltuples&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;order&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;reltuples&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;It is a bit of a nuisance to need to edit this text often to enter the column that I am looking for. With the following line, I can type the column on the command line, and after pressing &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Alt-c&lt;/span&gt;&lt;/tt&gt; (mnemonic: columns), the following happens:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;=&amp;gt; colname&amp;lt;Alt-c&amp;gt;
=&amp;gt; select distinct
-&amp;gt;   relname as table,
-&amp;gt;   reltuples as rowcount
-&amp;gt; from information_schema.columns as cols
-&amp;gt; join pg_class on pg_class.relname = cols.table_name
-&amp;gt; where column_name = 'colname'
-&amp;gt;   and reltuples &amp;gt; 0
-&amp;gt; order by reltuples;
┌─────────────┬──────────┐
│    table    │ rowcount │
├─────────────┼──────────┤
│ table1      │        7 │
│ table2      │       10 │
│ table3      │       22 │
│ table4      │       80 │
│ table5      │      126 │
│ table6      │    13460 │
│ table7      │    50112 │
└─────────────┴──────────┘
(7 rows)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The following, admittedly very ugly, line in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.,inputc&lt;/span&gt;&lt;/tt&gt; makes this possible:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="s2"&gt;&amp;quot;^[c&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;\C-a\C-kselect distinct\n  relname as table,\n  reltuples as rowcount \nfrom information_schema.columns as cols \njoin pg_class on pg_class.relname = cols.table_name \nwhere column_name = &amp;#39;\C-y&amp;#39;\n  and reltuples &amp;gt; 0 \norder by reltuples;\n&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;CTRL+a:&lt;/dt&gt;
&lt;dd&gt;The cursor is moved to the start of the line.&lt;/dd&gt;
&lt;dt&gt;CTRL+k:&lt;/dt&gt;
&lt;dd&gt;Everything starting from the cursor until the end of the line is killed, or deleted and stored in the kill buffer.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Then, a lot of typing happens, including newlines, and some spacing. Until just after the first quote.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;CTRL+y:&lt;/dt&gt;
&lt;dd&gt;The contents of the kill buffer is yanked in place&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;...and some conluding typing happens.&lt;/p&gt;
&lt;p&gt;This keyboard shortcut does not make a lot of sense in any other program than &lt;tt class="docutils literal"&gt;psql&lt;/tt&gt;. Luckily, you can select the program for which this shortcut is available by encapsulating the configuration as follows:&lt;/p&gt;
&lt;pre class="code sh literal-block"&gt;
&lt;span class="nv"&gt;$if&lt;/span&gt; psql
    &lt;span class="c"&gt;# some configuration
&lt;/span&gt;&lt;span class="nv"&gt;$endif&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This way, you can reprogram all your keys, including function keys!, to do something useful.&lt;/p&gt;
</summary></entry><entry><title>less: a love story</title><link href="http://joepvd.github.io/less-a-love-story.html" rel="alternate"></link><updated>2013-12-27T00:00:00+01:00</updated><author><name>joepd</name></author><id>tag:joepvd.github.io,2013-12-27:less-a-love-story.html</id><summary type="html">&lt;p&gt;Less. I use it more and more.  I would not be surprised if at least a fourth of my time in a console window actually is spent within less.  It is just a pager, you say?  True, but one that has been in &lt;a class="reference external" href="http://www.greenwoodsoftware.com/less/index.html"&gt;active development&lt;/a&gt; since 1983. The original developer currently is still the maintainer.  You don't need to be an experimental archeologist to put this tool to use. Getting acquainted to this pager will pay itself off pretty fast.&lt;/p&gt;
&lt;p&gt;If you haven't done so yet, have a look at &lt;tt class="docutils literal"&gt;man 1 less&lt;/tt&gt;. The synopsis looks like Sesamestreet episode with brain damage:&lt;/p&gt;
&lt;pre class="code sh literal-block"&gt;
less &lt;span class="o"&gt;[&lt;/span&gt;-&lt;span class="o"&gt;[&lt;/span&gt;+&lt;span class="o"&gt;]&lt;/span&gt;aABcCdeEfFgGiIJKLmMnNqQrRsSuUVwWX~&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;It might appear that this overabundance of seemingly unneeded features could serve as a practical definition of bloatware.  These are just the options without arguments. Most of the same options can be used from within the application itself. Once you notice that you like some options, you can make those default.  There are some true gems hidden in the following alphabet soup from the synopsis. I will show which ones I regularly use, but only after having a close look at the searching capabilities of less.&lt;/p&gt;
&lt;p&gt;Effective use of less implies that one can use its searching possibilities.  Striking the &lt;tt class="docutils literal"&gt;/&lt;/tt&gt; initiates a search, and &lt;tt class="docutils literal"&gt;enter&lt;/tt&gt; concludes it.  Use &lt;tt class="docutils literal"&gt;n&lt;/tt&gt; to go to the next match, &lt;tt class="docutils literal"&gt;N&lt;/tt&gt; for the previous.  Searching backward is started off with &lt;tt class="docutils literal"&gt;?&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Search handles by default regular expressions.  With some terminal escape codes set up, less will highlight the matches.  I often type a string like this as a make-shift highlighter:&lt;/p&gt;
&lt;pre class="code sh literal-block"&gt;
/someID&lt;span class="o"&gt;=[&lt;/span&gt;0-9&lt;span class="o"&gt;]&lt;/span&gt;+|error|&lt;span class="o"&gt;(&lt;/span&gt;STATE|button&lt;span class="o"&gt;)&lt;/span&gt;.*&lt;span class="err"&gt;$&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Less stores the searches in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.lesshist&lt;/span&gt;&lt;/tt&gt;, or in any file indicated by the environment variable &lt;tt class="docutils literal"&gt;$LESSHISTFILE&lt;/tt&gt;.  After starting typing &lt;tt class="docutils literal"&gt;/&lt;/tt&gt;, the up and down arrows are available to use previous searches.&lt;/p&gt;
&lt;p&gt;A search can also be started from the shell.  When I already know what to look for, I often use this, also to leave traces of what I am interested in in the shell history.  Chances are that I already used this search term in the shell, or will in the near future.  Next to helping myself to use zsh's history completion feature, this has proven to be a real time saver when I need to revisit the same problem again.  A typical use is when I want to know what happened at a specific time:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;%&lt;/span&gt; less +/^16:34 logfile
&lt;/pre&gt;
&lt;p&gt;This will open the file, and jump immediately to the first line with that time stamp.  Less will also store this search in its history file.  Unfortunatelty, there is no mechanism to search the past searches.&lt;/p&gt;
&lt;p&gt;The most recent search term has a special role when pressing &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ESC-F&lt;/span&gt;&lt;/tt&gt;.  New content of the file will be displayed as with &lt;tt class="docutils literal"&gt;tail &lt;span class="pre"&gt;-f&lt;/span&gt;&lt;/tt&gt; or the normal &lt;tt class="docutils literal"&gt;F&lt;/tt&gt;-function, but the scrolling will stop with the first match of the most recent search.&lt;/p&gt;
&lt;p&gt;A lesser known search facility is the one initiated by &lt;tt class="docutils literal"&gt;&amp;amp;&lt;/tt&gt;. This filters the output to just the matching lines.  I use this often when looking at the output of some command:  One can refrain from running the command again only to use grep to find the interesting lines.  A renewed search is done on the whole output, so one cannot apply a filter on a filter.  Specifying lines that do not match the expression (&lt;tt class="docutils literal"&gt;grep &lt;span class="pre"&gt;-v&lt;/span&gt;&lt;/tt&gt;), can be initiated by typing &lt;tt class="docutils literal"&gt;&amp;amp;!&lt;/tt&gt;.  After having refined the search pattern, the result can be saved with &lt;tt class="docutils literal"&gt;s filename&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;&amp;amp;&lt;/tt&gt;-filter interacts with the search history.  As I regularly have to dig in a logfiles where the first encounter is really helped by such a filter, I set up an alias like this:&lt;/p&gt;
&lt;pre class="code sh literal-block"&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;lf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;less +$'&amp;amp;event1|action2|state3|error\n' &amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;With this less-filter I can quickly get a birds eye perspective on the events.  The filter can be disabled by an empty filter, so by pressing &lt;tt class="docutils literal"&gt;&amp;amp;[enter]&lt;/tt&gt;. and can easily zoom in, and have this search string ready for poor man's highlighting.  A quick &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-N&lt;/span&gt;&lt;/tt&gt; to display line numbers, and typing the number of where I want to start to look, followed by &lt;tt class="docutils literal"&gt;g&lt;/tt&gt;, brings me immediately to where I want to be.&lt;/p&gt;
&lt;p&gt;When less is running, the following keys I use most:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;G&lt;/dt&gt;
&lt;dd&gt;Go to end of file. Before that, check if the file has changed. Great for viewing log files.&lt;/dd&gt;
&lt;dt&gt;g&lt;/dt&gt;
&lt;dd&gt;Go to beginning of file, or, when a number is pressed first, go to that line number.&lt;/dd&gt;
&lt;dt&gt;ESC-u&lt;/dt&gt;
&lt;dd&gt;Undo search highlighting.&lt;/dd&gt;
&lt;dt&gt;F&lt;/dt&gt;
&lt;dd&gt;Follow file. It's like &lt;tt class="docutils literal"&gt;tail &lt;span class="pre"&gt;-f&lt;/span&gt;&lt;/tt&gt;, but after the BREAK signal (CTRL+c), all the niceties of the pager are still intact.  And: &lt;tt class="docutils literal"&gt;tail &lt;span class="pre"&gt;-f&lt;/span&gt;&lt;/tt&gt; cannot do the line wrapping.&lt;/dd&gt;
&lt;dt&gt;Number%&lt;/dt&gt;
&lt;dd&gt;Type in &lt;tt class="docutils literal"&gt;50%&lt;/tt&gt;, and you'll see the middle of the file.&lt;/dd&gt;
&lt;dt&gt;-S[Enter]&lt;/dt&gt;
&lt;dd&gt;Toggle line wrapping.&lt;/dd&gt;
&lt;dt&gt;-i[Enter]&lt;/dt&gt;
&lt;dd&gt;Toggle case insensitive search.&lt;/dd&gt;
&lt;dt&gt;-N and -n&lt;/dt&gt;
&lt;dd&gt;Enable and disable line numbers.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Despite the numerous options, I am not using so much more in my day to day usage of less.  Some options can be specified on the command line.  The following I consider nice:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;-R&lt;/dt&gt;
&lt;dd&gt;For when the file contains raw characters, for example ANSI color codes. This causes less not to choke on colored output, or to see the garbage in a binary file, instead of an error message.&lt;/dd&gt;
&lt;dt&gt;-X&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;This causes the screen not to be repainted after less exits. After viewing a file or man-page, I find it increadibly useful to be able to see the last screen in my terminal emulator's scroll back window.  Just make the part visible that is of interest, and you have the reference visible when typing your command.  In most terminal emulators, Shift+PgUp/PgDown gets the relevant info back again.&lt;/p&gt;
&lt;p&gt;This setting makes most sense when the output is not too long, or if you know you'll be able to get to the important points in few jumps.  To disable this feature, use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-+X&lt;/span&gt;&lt;/tt&gt; as an option.&lt;/p&gt;
&lt;p class="last"&gt;It is unfortunate that everything that has been displayed in less is retained in the scrollback. It would be more convenient to only have a screen full of output in the console, especially when needing to browse insane amounts of text.  I have not yet managed to fix this.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;-M&lt;/dt&gt;
&lt;dd&gt;Get a long prompt in less. Useful info about filename, length of file, and current position.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;To have less always use the same options that you like, it listens to the &lt;tt class="docutils literal"&gt;$LESS&lt;/tt&gt; environment variable in your &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.bashrc&lt;/span&gt;&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;$ZDOTDIR/.zshrc&lt;/span&gt;&lt;/tt&gt;.  I have set mine to the following:&lt;/p&gt;
&lt;pre class="code sh literal-block"&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;LESS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'MSRiX'&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;These letters have the following effect: long prompt, chop long lines, raw, case insensitive search, keep output in scrollback buffer.&lt;/p&gt;
&lt;p&gt;Possibly, your distribution, or you yourself, has set up some nice colors to display different colors in man-pages.  I have the following escape codes somewhere in the startup files of my shell:&lt;/p&gt;
&lt;pre class="code sh literal-block"&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;LESS_TERMCAP_mb&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;$'\e[01;31m'&lt;/span&gt;       &lt;span class="c"&gt;# begin blinking
&lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;LESS_TERMCAP_md&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;$'\e[01;38;5;74m'&lt;/span&gt;  &lt;span class="c"&gt;# begin bold
&lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;LESS_TERMCAP_me&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;$'\e[0m'&lt;/span&gt;           &lt;span class="c"&gt;# end mode
&lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;LESS_TERMCAP_so&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;$'\e[38;5;070m'&lt;/span&gt;    &lt;span class="c"&gt;# begin standout (info box, search)
&lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;LESS_TERMCAP_se&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;$'\e[0m'&lt;/span&gt;           &lt;span class="c"&gt;# end standout-mode
&lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;LESS_TERMCAP_us&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;$'\e[04;38;5;146m'&lt;/span&gt; &lt;span class="c"&gt;# begin underline
&lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;LESS_TERMCAP_ue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;$'\e[0m'&lt;/span&gt;           &lt;span class="c"&gt;# end underline
&lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;MAN_KEEP_FORMATTING&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;/pre&gt;
&lt;p&gt;The last entry might not be clear.  When piping the output of &lt;tt class="docutils literal"&gt;man&lt;/tt&gt; to less, the colors are not retained. Unless the &lt;tt class="docutils literal"&gt;MAN_KEEP_FORMATTING&lt;/tt&gt; environment variable has a value.&lt;/p&gt;
&lt;p&gt;The same trick I use in Something that I often use if I want to see : &lt;tt class="docutils literal"&gt;man less | less &lt;span class="pre"&gt;+/'^&lt;/span&gt; &lt;span class="pre"&gt;*-X'&lt;/span&gt;&lt;/tt&gt;. This jumps directly to the place where &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-X&lt;/span&gt;&lt;/tt&gt; is in front of a line, possibly with some spaces. Most of the time, it just jumps to the explanation that you want to see, otherwise press &lt;tt class="docutils literal"&gt;n&lt;/tt&gt; to jump to the next hit.&lt;/p&gt;
</summary></entry><entry><title>Parameter expansion in zsh</title><link href="http://joepvd.github.io/parameter-expansion-in-zsh.html" rel="alternate"></link><updated>2013-12-10T00:00:00+01:00</updated><author><name>joepd</name></author><id>tag:joepvd.github.io,2013-12-10:parameter-expansion-in-zsh.html</id><summary type="html">&lt;p&gt;The shell is a high quality text processor, and zsh is especially suited for that purpose.  In this post, I will show some of the tricks I use for an editing problem that I encounter every day.  Concretely: How to quickly generate queries, after receiving a list of IDs.  This is what the result should look like:&lt;/p&gt;
&lt;pre class="code sql literal-block"&gt;
&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;ID&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'1234'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'2345'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'3456'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;A fast way to achieve this looks thusly:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;%&lt;/span&gt; &lt;span class="nv"&gt;ar&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;
&lt;span class="go"&gt;array&amp;gt; 1234
array&amp;gt; 2345
array&amp;gt; 3456
array&amp;gt; )

&lt;/span&gt;&lt;span class="gp"&gt;%&lt;/span&gt; print &lt;span class="s2"&gt;&amp;quot;select * from table where id in (${(j:, :)${(qq)ar[&amp;#64;]}});&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;select * from table where id in ('1234', '2345', '3456');&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;What is happening here? First I am creating an array of something I have available in my paste buffer: I type the name of an array, &lt;cite&gt;=&lt;/cite&gt;, and &lt;cite&gt;(&lt;/cite&gt;, and press enter. Then I paste a list of IDs, close it off with a &lt;cite&gt;)&lt;/cite&gt;. Now the info is available at my fingertips. The second action, the print statement with the hardly memorable parameter expansion, is the main topic of this post.&lt;/p&gt;
&lt;p&gt;Shells provide convenience functions to do stuff with parameters, and &lt;cite&gt;zsh&lt;/cite&gt; surely is the most advanced in this regard.  These parameter expansions are easiest to read from the inside to the outside, so let's have a look at &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;${(qq)ar[&amp;#64;]}&lt;/span&gt;&lt;/tt&gt;.  This consists of two parts, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;${ar[&amp;#64;]}&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;(qq)&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The result of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;${ar[&amp;#64;]}&lt;/span&gt;&lt;/tt&gt; is into all the elements of array &lt;tt class="docutils literal"&gt;ar&lt;/tt&gt;.  In any shell that conforms to POSIX, you can specify elements of an array by encapsulating them in square brackets: &lt;tt class="docutils literal"&gt;${ar[2]}&lt;/tt&gt; would be &lt;tt class="docutils literal"&gt;2345&lt;/tt&gt;.  One can use the &lt;tt class="docutils literal"&gt;&amp;#64;&lt;/tt&gt; to say that you want all the indexes.&lt;/p&gt;
&lt;p&gt;In &lt;tt class="docutils literal"&gt;zsh&lt;/tt&gt;, if there is an opening bracket directly after the curly opening bracket, magic is immanent.  The bracketed characters are flags.  For a complete overview of what can be done, see &lt;tt class="docutils literal"&gt;man zshexpn | less &lt;span class="pre"&gt;+/'^&lt;/span&gt; *Parameter Expansion Flags'&lt;/tt&gt;. In this case, the members of &lt;tt class="docutils literal"&gt;ar&lt;/tt&gt; are treated with the action that is hiding behind the &lt;tt class="docutils literal"&gt;qq&lt;/tt&gt;.  The effect of this flag is quoted with single quotes.  (You can use three q's for double quotes).&lt;/p&gt;
&lt;p&gt;So the net result of the inner expansion is a copy of the arrat &lt;tt class="docutils literal"&gt;ar&lt;/tt&gt;, with the difference that the elements are quoted.  This is the intermediate result what the outer expansion, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;${(j:,&lt;/span&gt; &lt;span class="pre"&gt;:)…}&lt;/span&gt;&lt;/tt&gt; is working with.  The flag &lt;tt class="docutils literal"&gt;j&lt;/tt&gt; is for joining the elements of an array, with whatever is between the colons as a separator, in our case a comma followed by space. The colons are arbitrary: If your join string contains colons itself, you can take a comma or a period, or whatever.&lt;/p&gt;
&lt;p&gt;The result is, as you have seen, that &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;${(j:,&lt;/span&gt; &lt;span class="pre"&gt;:)${(qq)ar[&amp;#64;]}}&lt;/span&gt;&lt;/tt&gt; is expanded to a comma separated line of quoted elements of array &lt;tt class="docutils literal"&gt;ar&lt;/tt&gt;.  As I use this kind of expansion on a daily basis, and this expansion is a bit too tedious to type in every time, I spent a bit of time to make this expansion available at my finger tips in the form of a shell function &lt;tt class="docutils literal"&gt;a2q&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code sh literal-block"&gt;
a2q &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        print &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="p"&gt;(j:, :)&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="p"&gt;(Pqq)1&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="p"&gt;[&amp;#64;]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This can be used as follows:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;%&lt;/span&gt; print &lt;span class="s2"&gt;&amp;quot;select * from table where id in ($(a2q ar));&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Compared to the interactive version, the array is a positional parameter: &lt;tt class="docutils literal"&gt;$1&lt;/tt&gt; is being expanded, so you can type: &lt;tt class="docutils literal"&gt;a2q myarray&lt;/tt&gt; to have &lt;tt class="docutils literal"&gt;a2q&lt;/tt&gt; work on &lt;tt class="docutils literal"&gt;myarray&lt;/tt&gt;. In order to make this work, an extra trick needed to be added:  The &lt;cite&gt;P&lt;/cite&gt;-flag has been added to the inner parameter expansion flags. This makes that the resulting string is considered to be a parameter.&lt;/p&gt;
&lt;p&gt;This works great, but it can be generalized.  Sometimes the list of IDs is given as an file.  By virtue of the &lt;cite&gt;f&lt;/cite&gt;-flag, the following snippet loads the newline separated contents of file &lt;cite&gt;file&lt;/cite&gt; into array &lt;cite&gt;array&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="code sh literal-block"&gt;
&lt;span class="nv"&gt;array&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="p"&gt;(f)&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&amp;lt;file&lt;span class="k"&gt;)}&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Just to facilitate laziness, the function a2q can be expanded to check what type of argument it got, and based on that, populate a temporary array with infos. Multiple arguments are allowed. If no argument is provided, a2q will listen to STDIN, so you can pipe the output of another command to it. After all the processing, the last step is to print the contents of the array in the desired way:&lt;/p&gt;
&lt;pre class="code sh literal-block"&gt;
emulate -L zsh
&lt;span class="nb"&gt;typeset&lt;/span&gt; -U ar
&lt;span class="nv"&gt;ar&lt;/span&gt;&lt;span class="o"&gt;=()&lt;/span&gt;
_err&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Do not understand: ${1}&amp;quot;&lt;/span&gt; &amp;gt;&amp;amp;2
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Arguments need to be files, names of arrays, or standard input.&amp;quot;&lt;/span&gt; &amp;gt;&amp;amp;2
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Arrays must be referenced by name, so use `array` instead of `$array`.'&lt;/span&gt; &amp;gt;&amp;amp;2
    &lt;span class="nb"&gt;exit &lt;/span&gt;1
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$# &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt; 0 &lt;span class="o"&gt;]]&lt;/span&gt;; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="c"&gt;# Listen to STDIN if no arguments are provided
&lt;/span&gt;    &lt;span class="nv"&gt;ar&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="p"&gt;(f)&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&amp;lt;&amp;amp;0&lt;span class="k"&gt;)}&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;fi

while&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$# &lt;/span&gt;&amp;gt; 0 &lt;span class="o"&gt;]]&lt;/span&gt;; &lt;span class="k"&gt;do
    if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; -r &lt;span class="s2"&gt;&amp;quot;$1&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; -f &lt;span class="s2"&gt;&amp;quot;$1&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="c"&gt;# A readable file.
&lt;/span&gt;        &lt;span class="nv"&gt;ar&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;
            &lt;span class="nv"&gt;$ar&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&amp;#64;&lt;span class="o"&gt;]&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;${(fq)$(&amp;lt;$1)}&amp;quot;&lt;/span&gt;
        &lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="p"&gt;(Pt)1&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;array&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;; &lt;span class="k"&gt;then
        &lt;/span&gt;&lt;span class="nv"&gt;ar&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;
            &lt;span class="nv"&gt;$ar&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&amp;#64;&lt;span class="o"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="p"&gt;(Pq)1&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else
        &lt;/span&gt;_err
    &lt;span class="k"&gt;fi
    &lt;/span&gt;&lt;span class="nb"&gt;shift
&lt;/span&gt;&lt;span class="k"&gt;done

&lt;/span&gt;print &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="p"&gt;(j:, :)&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="p"&gt;(qq)ar[&amp;#64;]&lt;/span&gt;&lt;span class="k"&gt;}}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I stored the above as &lt;tt class="docutils literal"&gt;a2q&lt;/tt&gt; in a &lt;a class="reference external" href="http://zsh.sourceforge.net/Doc/Release/Functions.html#Autoloading-Functions"&gt;directory whose contents gets autoloaded&lt;/a&gt; when required, so I have it available at my finger tips.&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
</summary></entry><entry><title>About this website</title><link href="http://joepvd.github.io/about-this-website.html" rel="alternate"></link><updated>2013-12-09T00:00:00+01:00</updated><author><name>joepd</name></author><id>tag:joepvd.github.io,2013-12-09:about-this-website.html</id><summary type="html">&lt;p&gt;Hello world! This is the first post to my site, which will double as the about page.  Yet another site dedicated to consoles, shells, and old school interfaces to solved problems?  Isn't there enough documentation and experience out there to warrant another site?&lt;/p&gt;
&lt;p&gt;As with all good questions, the answer is both &lt;em&gt;yes&lt;/em&gt; and &lt;em&gt;no&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Yes&lt;/strong&gt;.  I proudly want to produce new content as a tribute to all the valuable and intricate pieces of information that have been shared before.  I have learnt an awful lot from excellent people documenting informally how they overcome smaller and bigger technological hurdles while accomplishing stuff.  And I have enjoyed doing so.  A second reason for this resounding yes, is the hope that processes of documenting and publishing trivia, intricacies and insights will assist me in the battle against forgetfulness.&lt;/p&gt;
&lt;p&gt;But I fancy to think that also that also &lt;strong&gt;No&lt;/strong&gt; is a valid answer:  This site will have a distinctive perspective.  One thing where I find current informal, online documentation lacking, is in the description of &lt;strong&gt;interactive usage&lt;/strong&gt; of tools.  Much of the online documentation is a static description of how tools work, whereas how those tools can be used efficiently in a work flow of analyzing and fixing problems.  If this were a blog about cooking, I would try to refrain from showing the ingredients and knives, and rather focus on how to cut and fry an onion to acchieve different results.&lt;/p&gt;
&lt;p&gt;I have a fetish for basic tools.  Be it a sharp knife in the kitchen, or the precise power tools that the One Thing Well software philosophy has brought about.  The process of interactive discovery of the real problem is where the flexibility of the software tool philosophy really shines.  In this blog I hope to provide some useful perspectives, approaches and recipes about the intersection of basic tools and work flows.&lt;/p&gt;
&lt;p&gt;This site is statically generated with &lt;a class="reference external" href="http://getpelican.com"&gt;Pelican&lt;/a&gt;, and I don't feel the need to take care of comments.  I do not want to imply that I do not like feed back, but prefer to get spam in my mail box rather than on the public net that I need to maintain.  For now, for praise and bug reports, you can reach me best over email. I am sure you can puzzle my address together from the following bits of information:&lt;/p&gt;
&lt;p&gt;user: escape-code
host: xs4all
tld: nl&lt;/p&gt;
&lt;p&gt;Enjoy reading!&lt;/p&gt;
</summary></entry></feed>